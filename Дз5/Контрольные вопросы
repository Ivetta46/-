Ответы на контрольные вопросы: 

1) RAII(“Resource Acquisition is Initialization”) - в конструкторе объект получает доступ к какому-либо ресурсу и сохраняет описатель ресурса в закрытый члена класса, а при вызове деструктора этот ресурс (то есть получение некоторого ресурса совмещается с инициализацией, а освобождение — с уничтожением объекта). 
2) Конструктор — это особый тип метода класса, который автоматически вызывается при создании объекта этого же класса(используются для инициализации переменных-членов класса значениями, которые предоставлены по умолчанию/пользователем, или для выполнения любых шагов настройки, необходимых для используемого класса). 

Конструктор копирования нужен для того, чтобы создавать копии объектов класса. То есть, с помощью конструктора копирования можно получить копию уже существующего объекта. 

 Конструктор копирования должен получать входным параметром константную ссылку на объект такого же класса. 

НазваниеКласса (const  НазваниеКласса& object){  

   // код конструктора копирования 

} 

Деструктор призван очищать всяческий "мусор". Например, если конструктор использует операцию new для выделения памяти, то деструктор должен обратиться к delete для ее освобождения. 

Деструктор не имеет возвращаемого значения и не имеет объявляемого типа.  

В отличие от конструктора, деструктор не может иметь аргументов.  

Таким образом, прототип деструктора класса Stock выглядит следующим образом: 

~Stock ( ) ; 

 

Геттеры -- методы, возвращающие поля (константная ссылка или копия. Нельзя менять возвращенные!) 

Сеттеры -- методы, изменяющие поля 

Конструктор по умолчанию - это конструктор, применяемый для создания объекта, когда не предоставляются явные инициализирующие значения.  

Для класса Stock конструктор по умолчанию будет таким: 

 Stock : : Stock () { } 

Если деструктор не определен, компилятор будет предоставлять его по умолчанию. 
3) Интерфейс - это совместно используемая часть, предназначенная для взаимодействия двух систем. 

Инкапсуляция - сокрытие методов и полей класса от пользователя, в целях сохранения внутренних инвариантов. Сокрытие данных (размещение данных в разделе private класса) представляет собой способ инкапсуляции, и поэтому скрывает функциональные детали реализации в разделе private. 

То есть private хранит основные данные класса, на которые не могут оказывать влияние другие классы в программном коде. 

 

Константный метод — это метод, который гарантирует, что не будет изменять объект или вызывать неконстантные методы класса.  
 
4) Когда проекты становятся большими, их следует разбивать на несколько файлов в целях удобства и улучшения функциональности. 

Файлы .h являются объявлением(используются для отображения общедоступных переменных экземпляра), а файлы .cpp - это реализация(используются для реализации этих методов и использования этих переменных экземпляра).   
5) Три этапа: (1) обработка исходного кода препроцессором,  

(2) компиляция в объектный код, 

(3) компоновка объектных модулей, включая модули из объектных библиотек, в исполняемый файл. 

 

1 - Препроцессор находит директиву #include <iostream>, ищет файл iostream и заменяет директиву текстом из этого файла 

2- Затем результат работы препроцессора передаётся компилятору.  

Компилятор производит весь положенный комплекс работ:  

от синтаксического разбора и поиска ошибок до создания объектного файла. 

Результатом работы является объектный файл полученный на основе всего того текста, что был предоставлен в компиляционном листе. 

3- На этапе линковки выполняется объединение всех объектных файлов проекта,  

откомпилированных по соответствующим компиляционным листам проекта  

в единую сущность.  
