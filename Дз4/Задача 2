#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

struct Student;
struct Lesson;

struct Student
{
    Student() : name("Name"), les_pointers({ nullptr })
    {}

    Student(const std::string& n) : name(n), les_pointers({ nullptr })
    {}

    Student(const std::string& n, std::vector <Lesson*>& v) :
            name(n), les_pointers(v)
    {}

    void print_lessons()
    {
        auto print1 = [](auto les) {std::cout << les->name << ", "; };
        auto print2 = [](auto les) {std::cout << les->name; };
        std::cout << name << " attends ";
        std::for_each(std::begin(les_pointers), std::end(les_pointers) - 1, print1);
        std::for_each(std::end(les_pointers) - 1, std::end(les_pointers), print2);
        std::cout << " lessons.\n";
    }

    std::string name;
    std::vector <Lesson*> les_pointers;
};

struct Lesson
{
    Lesson() : name("Name"), st_pointers({ nullptr })
    {}

    Lesson(const std::string& n) : name(n), st_pointers({ nullptr })
    {}

    Lesson(const std::string& n, std::vector <Student*>& v) :
            name(n), st_pointers(v)
    {}


    void print_students()
    {
        auto print1 = [](auto st) {std::cout << st->name << ", "; };
        auto print2 = [](auto st) {std::cout << st->name; };
        std::cout << name << " lessons are attended by students ";
        std::for_each(std::begin(st_pointers), std::end(st_pointers) - 1, print1);
        std::for_each(std::end(st_pointers) - 1, std::end(st_pointers), print2);
        std::cout << ".\n";
    }

    std::string name;
    std::vector <Student*> st_pointers;
};

void push_lesson(std::vector <Lesson>&, std::vector <Student* >, Lesson&);
void push_student(std::vector <Student>&, std::vector <Lesson* >, Student&);

int main()
{
    std::vector <Student> students;
    std::vector <Lesson> lessons;

    Student st1 = { "Student_1" };
    Student st2 = { "Student_2" };
    Student st3 = { "Student_3" };
    Student st4 = { "Student_4" };
    Student st5 = { "Student_5" };

    Lesson les1 = { "Physics" };
    Lesson les2 = { "Math" };
    Lesson les3 = { "Chemistry" };

    push_lesson(lessons, { &st1, &st3, &st4}, les1);
    push_lesson(lessons, { &st2, &st3, &st5}, les2);
    push_lesson(lessons, { &st1, &st2, &st4, &st5}, les3);

    push_student(students, { &les1, &les3 }, st1);
    push_student(students, { &les2, &les3 }, st2);
    push_student(students, { &les1, &les2 }, st3);
    push_student(students, { &les1, &les3 }, st4);
    push_student(students, { &les2, &les3 }, st5);


    std::for_each(std::begin(students), std::end(students), [](Student st) {st.print_lessons(); });
    std::for_each(std::begin(lessons), std::end(lessons), [](Lesson les) {les.print_students(); });

    return 0;
}

void push_lesson(std::vector <Lesson>& lessons, std::vector <Student* > v, Lesson& les)
{
    les.st_pointers = v;
    lessons.push_back(les);
}

void push_student(std::vector <Student>& students, std::vector <Lesson* > v, Student& st)
{
    st.les_pointers = v;
    students.push_back(st);
}
